# ***************
# exercise 01
# ***************
# a)
library(datarium)
data("marketing")
summary(marketing)
# b)
head(marketing, 4)
marketing$youtube <- as.numeric(marketing$youtube)
marketing$facebook <- as.numeric(marketing$facebook)
marketing$newspaper <- as.numeric(marketing$newspaper)
marketing$sales <- as.numeric(marketing$sales)
cor(marketing)[4, 1:3]
summary(marketing)
hist(marketing$sales, main = "histograma da variável objeto", xlab = "valor de vendas")
install.packages("datarium")
# ***************
# exercise 01
# ***************
# a)
library(datarium)
data("marketing")
summary(marketing)
# b)
head(marketing, 4)
marketing$youtube <- as.numeric(marketing$youtube)
marketing$facebook <- as.numeric(marketing$facebook)
marketing$newspaper <- as.numeric(marketing$newspaper)
marketing$sales <- as.numeric(marketing$sales)
cor(marketing)[4, 1:3]
summary(marketing)
hist(marketing$sales, main = "histograma da variável objeto", xlab = "valor de vendas")
# Libraries
library(rpart)
library(rpart.plot)
library(neuralnet)
# Variáveis globais
MAE <- function(method, d) {
mae <- mean(abs(d))
cat("(", method, ") MAE: ", mae)
}
RMSE <- function(method, d) {
rmse <- sqrt(mean(d^2))
cat("(", method, ") RMSE: ", rmse)
}
################################################## REGRESSÃO ##################################################
# Exercício 1 --------------------------------------------------
data <- read.csv("")
str(data)
head(data)
dimension <- dim(data)
cat("Dimensão\nLinhas: ", dimension[1], "\t Colunas: ", dimension[2])
summary(data)
numberRows <- nrow(data)
# Exercício 2 --------------------------------------------------
# Variáveis
#
index <- sample(1:numberRows, as.integer(0.7 * numberRows))
data.train <- data[index, ]
data.test <- data[-index, ]
library(readxl)
data <- read_excel("D:/01. Work/01. University - ISEP (MEI)/01. Pré-Requisitos/06. Análise de Dados em Informática/Trabalho em Grupo ANADI/Iteration 02/countryagregatedata.xlsx")
View(data)
# Libraries
library(rpart)
library(rpart.plot)
library(neuralnet)
# Variáveis globais
MAE <- function(method, d) {
mae <- mean(abs(d))
cat("(", method, ") MAE: ", mae)
}
RMSE <- function(method, d) {
rmse <- sqrt(mean(d^2))
cat("(", method, ") RMSE: ", rmse)
}
################################################## REGRESSÃO ##################################################
# Exercício 1 --------------------------------------------------
data <- read.csv("")
str(data)
head(data)
dimension <- dim(data)
cat("Dimensão\nLinhas: ", dimension[1], "\t Colunas: ", dimension[2])
summary(data)
numberRows <- nrow(data)
# Exercício 2 --------------------------------------------------
# Variáveis
# Exercício 3 --------------------------------------------------
# Variáveis
# Divisão dos dados em dois subconjuntos - treino e teste - segundo o critério holdout (70% treino/30% teste)
index <- sample(1:numberRows, as.integer(0.7 * numberRows))
data.train <- data[index, ]
data.test <- data[-index, ]
index <- sample(1:numberRows, as.integer(0.7 * numberRows))
data.train <- data[index, ]
data.test <- data[-index, ]
# Alínea a)
slr.model <- lm(total_deaths ~ new_cases, data = data.train)
slr.model
summary(slr.model)
plot(data.train$new_cases, data.train$total_deaths, pch = 20)
abline(slr.model$coefficients[1], slr.model$coefficients[2], col = "red")
# Alínea b)
plot(data.train$new_cases, data.train$total_deaths, pch = 20,
xlab = "Novos Casos",
ylab = "Total de Mortes",
main = "Diagrama de Dispersão e Reta de Regressão")
abline(slr.model$coefficients[1], slr.model$coefficients[2], col = "red")
slr.pred <- predict(slr.model, data.test)
d <- data.test$total_deaths - slr.pred
# Erro Médio Absoluto
MAE("Regressão Linear", d);
# Raiz Quadrada do Erro Médio
RMSE("Regressão Linear", d);
#Exercicio 1 - Ficha TP6 Arvores de Decisão
#Ana Madureira
#Pretende-se determinar a qual das duas classes (benigna ou maligna) o tumor pertence:
#  a) Comece por carregar o dataset ”BreastCancer” da biblioteca “mlbench” para o ambiente
# do R. Verifique a sua dimensão e obtenha um sumário dos dados;
library(rpart)
library(mlbench)
# Será utilizado o dataset Wisconsin Breast Cancer
data(BreastCancer)
dim(BreastCancer)
View(BreastCancer)
###[1] 699  11
### levels(BreastCancer$Class)
###[1] "benign"    "malignant"
head(BreastCancer)
summary(BreastCancer)
#b) Usando os gráficos apropriados, analise os vários atributos do conjunto de dados;
library(corrplot)
BreastCancer$Cl.thickness <- as.numeric(BreastCancer$Cl.thickness)
BreastCancer$Cell.size <- as.numeric(BreastCancer$Cell.size)
BreastCancer$Cell.shape <- as.numeric(BreastCancer$Cell.shape)
BreastCancer$Marg.adhesion <- as.numeric(BreastCancer$Marg.adhesion)
BreastCancer$Epith.c.size <- as.numeric(BreastCancer$Epith.c.size)
BreastCancer$Bare.nuclei <- as.numeric(BreastCancer$Bare.nuclei)
BreastCancer$Bl.cromatin <- as.numeric(BreastCancer$Bl.cromatin)
BreastCancer$Normal.nucleoli <- as.numeric(BreastCancer$Normal.nucleoli)
BreastCancer$Mitoses <- as.numeric(BreastCancer$Mitoses)
BreastCancer$Id <- NULL
BreastCancer = na.omit(BreastCancer)
bc = cor(BreastCancer[ ,1:9]) #create an object of the features
library(reshape2)
library(ggplot2)
breastcancer.m = melt(BreastCancer, id.var="Class")
ggplot(data=breastcancer.m, aes(x=Class, y=value)) + geom_boxplot() +facet_wrap(~variable,ncol = 3)
#Exercicio 1 - Ficha TP6 Arvores de Decisão
#Ana Madureira
#Pretende-se determinar a qual das duas classes (benigna ou maligna) o tumor pertence:
#  a) Comece por carregar o dataset ”BreastCancer” da biblioteca “mlbench” para o ambiente
# do R. Verifique a sua dimensão e obtenha um sumário dos dados;
library(rpart)
library(mlbench)
# Será utilizado o dataset Wisconsin Breast Cancer
data(BreastCancer)
dim(BreastCancer)
View(BreastCancer)
###[1] 699  11
### levels(BreastCancer$Class)
###[1] "benign"    "malignant"
head(BreastCancer)
summary(BreastCancer)
#b) Usando os gráficos apropriados, analise os vários atributos do conjunto de dados;
library(corrplot)
BreastCancer$Cl.thickness <- as.numeric(BreastCancer$Cl.thickness)
BreastCancer$Cell.size <- as.numeric(BreastCancer$Cell.size)
BreastCancer$Cell.shape <- as.numeric(BreastCancer$Cell.shape)
BreastCancer$Marg.adhesion <- as.numeric(BreastCancer$Marg.adhesion)
BreastCancer$Epith.c.size <- as.numeric(BreastCancer$Epith.c.size)
BreastCancer$Bare.nuclei <- as.numeric(BreastCancer$Bare.nuclei)
BreastCancer$Bl.cromatin <- as.numeric(BreastCancer$Bl.cromatin)
BreastCancer$Normal.nucleoli <- as.numeric(BreastCancer$Normal.nucleoli)
BreastCancer$Mitoses <- as.numeric(BreastCancer$Mitoses)
BreastCancer$Id <- NULL
BreastCancer = na.omit(BreastCancer)
bc = cor(BreastCancer[ ,1:9]) #create an object of the features
library(reshape2)
library(ggplot2)
breastcancer.m = melt(BreastCancer, id.var="Class")
ggplot(data=breastcancer.m, aes(x=Class, y=value)) + geom_boxplot() +facet_wrap(~variable,ncol = 3)
